package org.davidmoten.rx.jdbc.pool.internal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.davidmoten.rx.pool.Checkin;

public final class PooledConnection implements DelegatedConnection {

    private final Connection connection;
    private final Checkin checkin;

    public PooledConnection(Connection connection, Checkin checkin) {
        this.connection = connection;
        this.checkin = checkin;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql, columnIndexes), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql, columnNames), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql, autoGeneratedKeys), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
            int resultSetHoldability) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)
            throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, resultSetType, resultSetConcurrency), this);
    }

    @Override
    public void close() {
        // doesn't close the underlying connection, just releases it for reuse
        checkin.checkin();
    }

    @Override
    public Connection con() {
        return connection;
    }

    // override hashcode (and equals) so that we can do mostly reliable unit tests
    // for the repeated appearance of connections from pool. Protecting the unit
    // tests against hashCode collision is not really that necessary as it will be
    // rare
    @Override
    public int hashCode() {
        return con().hashCode();
    }

    @Override
    public boolean equals(Object o) {
        return con().equals(o);
    }

}
