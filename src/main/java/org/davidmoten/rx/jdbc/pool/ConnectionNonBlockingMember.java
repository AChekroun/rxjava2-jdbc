package org.davidmoten.rx.jdbc.pool;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import org.davidmoten.rx.pool.MemberWithValue;
import org.davidmoten.rx.pool.NonBlockingMember;
import org.davidmoten.rx.pool.NonBlockingPool;

public final class ConnectionNonBlockingMember
        implements DelegatedConnection, MemberWithValue<Connection> {

    private final MemberWithValue<Connection> member;

    public ConnectionNonBlockingMember(NonBlockingPool<Connection> pool) {
        member = new NonBlockingMember<Connection>(pool, this);
    }

    @Override
    public Connection con() {
        return member.value();
    }

    @Override
    public MemberWithValue<Connection> checkout() {
        return member.checkout();
    }

    @Override
    public void checkin() {
        member.checkin();
    }

    @Override
    public Connection value() {
        // must return this rather than delegated member.value because close
        // will check it in rather than close the connection properly
        return this;
    }

    @Override
    public void shutdown() {
        member.shutdown();
    }

    @Override
    public boolean isShutdown() {
        return member.isShutdown();
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, columnIndexes), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames)
            throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, columnNames), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
            throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, autoGeneratedKeys), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(con().prepareStatement(sql,
                resultSetType, resultSetConcurrency, resultSetHoldability), this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType,
            int resultSetConcurrency) throws SQLException {
        return new ConnectionNonBlockingMemberPreparedStatement(
                con().prepareStatement(sql, resultSetType, resultSetConcurrency), this);
    }

    
    @Override
    public void close() {
        // doesn't close the underlying connection, just releases it for reuse
        member.checkin();
    }

}
